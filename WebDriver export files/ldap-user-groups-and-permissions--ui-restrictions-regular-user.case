package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;

public class LdapUserGroupsAndPermissionsUiRestrictionsRegularUser {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @Before
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://www-cms-uat.deakin.edu.au";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testLdapUserGroupsAndPermissionsUiRestrictionsRegularUser() throws Exception {
    // ################
    // CATEGORY: LDAP User groups and Permissions
    // TEST CASE: Tests a regular user can't access system admin areas of Squiz Matrix admin UI
    // TEST IDs: L02

// ################


// Impersonate a regular user
driver.get(baseUrl + "${admin_ui_url}");
driver.findElement(By.xpath("//img[contains(@src,'/__lib/web/images/icons/header/login_as_white.png')]")).click();
// ERROR: Caught exception [ERROR: Unsupported command [selectFrame | sq_header | ]]
driver.findElement(By.id("user")).clear();
driver.findElement(By.id("user")).sendKeys("${ldap_integration_authorUsername}");
driver.findElement(By.cssSelector("input.sq-btn-blue")).click();
// ERROR: Caught exception [ERROR: Unsupported command [selectFrame | relative=top | ]]
for (int second = 0;; second++) {
	if (second >= 60) fail("timeout");
	try { if ("My Account".equals(driver.findElement(By.id("sq-menu-tab-my_space")).getText())) break; } catch (Exception e) {}
	Thread.sleep(1000);
}

for (int second = 0;; second++) {
	if (second >= 60) fail("timeout");
	try { if (driver.findElement(By.xpath("//img[contains(@src,'/__lib/web/images/icons/header/logout_and_resume.png')]")).isDisplayed()) break; } catch (Exception e) {}
	Thread.sleep(1000);
}


// # TEST ID: L02 
// Check that admin functions are disabled
try {
  assertFalse(isElementPresent(By.xpath("//img[contains(@src,'/__lib/web/images/icons/header/login_as_white.png')]")));
} catch (Error e) {
  verificationErrors.append(e.toString());
}
driver.get(baseUrl + "${admin_ui_url}?SQ_BACKEND_PAGE=main&backend_section=am&am_section=edit_asset&assetid=20&sq_asset_path=2,20&sq_link_path=2,20&asset_ei_screen=details");
try {
  assertTrue(isElementPresent(By.cssSelector("p.sq-login-message")));
} catch (Error e) {
  verificationErrors.append(e.toString());
}
driver.get(baseUrl + "${admin_ui_url}?SQ_BACKEND_PAGE=main&backend_section=am&am_section=edit_asset&assetid=17&sq_asset_path=2,17&sq_link_path=2,17&asset_ei_screen=details");
try {
  assertTrue(isElementPresent(By.cssSelector("p.sq-login-message")));
} catch (Error e) {
  verificationErrors.append(e.toString());
}
driver.get(baseUrl + "${admin_ui_url}?SQ_BACKEND_PAGE=main&backend_section=am&am_section=edit_asset&assetid=5&sq_asset_path=5&sq_link_path=5&asset_ei_screen=paths");
try {
  assertTrue(isElementPresent(By.cssSelector("p.sq-login-message")));
} catch (Error e) {
  verificationErrors.append(e.toString());
}

// Stop impersonating regular user
driver.get(baseUrl + "${admin_ui_url}");
for (int second = 0;; second++) {
	if (second >= 60) fail("timeout");
	try { if ("My Account".equals(driver.findElement(By.id("sq-menu-tab-my_space")).getText())) break; } catch (Exception e) {}
	Thread.sleep(1000);
}

driver.findElement(By.xpath("//img[contains(@src,'/__lib/web/images/icons/header/logout_and_resume.png')]")).click();
for (int second = 0;; second++) {
	if (second >= 60) fail("timeout");
	try { if ("My Account".equals(driver.findElement(By.id("sq-menu-tab-my_space")).getText())) break; } catch (Exception e) {}
	Thread.sleep(1000);
}

// ERROR: Caught exception [ERROR: Unsupported command [selectFrame | relative=top | ]]

// Test complete

  }

  @After
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
